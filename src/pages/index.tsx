import AddGameDialog from "@/components/dialogs/add-game-dialog";
import EditGameDialog from "@/components/dialogs/edit-game-dialog";
import ByPlatform from "@/components/display/by-platform";
import List from "@/components/display/list";
import useGamesCache from "@/hooks/use-games-cache";
import { Game, WithId } from "@/types";
import AddIcon from "@mui/icons-material/Add";
import { Fab } from "@mui/material";
import { styled } from "goober";
import Head from "next/head";
import { useState } from "react";

enum DisplayMethod {
  BY_PLATFORM,
  LIST,
}

const StyledFab = styled(Fab)`
  position: fixed;
  bottom: 1rem;
  right: 1rem;
`;

type PageProps = {
  children: React.ReactNode;
  selectedGame: Game | null;
  setSelectedGame: React.Dispatch<React.SetStateAction<Game | null>>;
};

const Page = ({ children, selectedGame, setSelectedGame }: PageProps) => {
  const [addGameDialogOpen, setAddGameDialogOpen] = useState(false);

  return (
    <>
      <Head>
        <title>GameDB</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {children}
      <StyledFab
        color="primary"
        aria-label="add"
        onClick={() => setAddGameDialogOpen(true)}
      >
        <AddIcon />
      </StyledFab>
      {selectedGame && (
        <EditGameDialog
          game={selectedGame}
          onClose={() => setSelectedGame(null)}
          collection="games"
        />
      )}
      <AddGameDialog
        open={addGameDialogOpen}
        onClose={() => setAddGameDialogOpen(false)}
        collection="games"
      />
    </>
  );
};

const Home = () => {
  const { games } = useGamesCache("games");
  const [selectedGame, setSelectedGame] = useState<Game | null>(null);
  const [displayMethod, setDisplayMethod] = useState<DisplayMethod>(
    DisplayMethod.BY_PLATFORM
  );

  const handleGameClick = (game: Game) => {
    setSelectedGame(game);
  };

  if (displayMethod === DisplayMethod.BY_PLATFORM) {
    return (
      <Page selectedGame={selectedGame} setSelectedGame={setSelectedGame}>
        <ByPlatform games={games} handleGameClick={handleGameClick} />
      </Page>
    );
  }

  if (displayMethod === DisplayMethod.LIST) {
    return (
      <Page selectedGame={selectedGame} setSelectedGame={setSelectedGame}>
        <List games={games} handleGameClick={handleGameClick} />
      </Page>
    );
  }

  return null;
};

export default Home;
